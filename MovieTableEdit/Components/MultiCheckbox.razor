
@namespace MultiCheckbox
@rendermode InteractiveServer


<button class="btn btn-outline-secondary dropdown-toggle text-truncate text-start" 
        @onclick="@TogglePanel"
        type="button" 
        id="dropdownMenuButton" 
        data-bs-toggle="dropdown" 
        aria-expanded="false" 
        data-bs-auto-close="outside"
        >Click
    
        @if(true)
        {
            <div>                
                <br>
                    @foreach (int _id in OptionIdList)
                    {
                        <label style="margin-right: 10px;">
                            <input type="checkbox" 
                            checked="@IsOptionSelected(_id)" 
                            @onchange="() => ToggleOption(_id)"/> @IdOptionDict[_id]
                        </label>
                        @if(IfVerticalArrangement)
                        {
                            <br> 
                        }
                    
                }
                
            </div>
        }
    </button>
    @* <div class="dropdown-menu w-100" aria-labelledby="dropdownMenuButton"> *@
    
@code
{
    [Parameter] public List<string> Options { get; set; } = new();
    [Parameter] public Dictionary<int, string> IdOptionDict { get; set; } = new Dictionary<int, string>();
    [Parameter] public List<int> SelectedIdList { get; set; } = new();
    [Parameter] public EventCallback<List<int>> SelectedIdListChanged { get; set; }
    [Parameter] public bool IsMultiSelect { get; set; } = true;    
    [Parameter] public bool IfVerticalArrangement { get; set; } = true; 

    
    private List<int> OptionIdList = new List<int>();
    private bool if_show_checkbox = false;

    protected override void OnInitialized()
    {
        if(IdOptionDict.Count() == 0)
        {
            for (int i=0; i < Options.Count; i++)
            {
                IdOptionDict[i] = Options[i];
            }
        }

        for (int i=0; i < Options.Count; i++)
        {
            OptionIdList = new List<int>(IdOptionDict.Keys);
        }
        
    }

    private bool IsOptionSelected(int _id)
    {
        return SelectedIdList.Contains(_id);
    }

    private async Task ToggleOption(int _id)
    {
        if (SelectedIdList.Contains(_id))
        {
            SelectedIdList.Remove(_id);
        }
        else
        {
            if (!IsMultiSelect)
            {
                SelectedIdList.Clear();
            }
            SelectedIdList.Add(_id);
        }

        await SelectedIdListChanged.InvokeAsync(SelectedIdList);
    }
    
    private void TogglePanel()
    {   
        if(if_show_checkbox)
        {
            if_show_checkbox = false;
        }
        else
        {
            if_show_checkbox = true;
        }
    }

}
