
@namespace MultiCheckbox
@rendermode InteractiveServer


<button class="btn btn-outline-secondary dropdown-toggle text-truncate text-start" 
        @onclick="@SampleFunc"
        type="button" 
        id="dropdownMenuButton" 
        data-bs-toggle="dropdown" 
        aria-expanded="false" 
        data-bs-auto-close="outside"
        >Click
    
        @if(if_show_checkbox)
        {
            <div>
                Columns to display:
                <br>
                @foreach (var option in selection_dict)
                {
                    <label style="margin-right: 10px;">
                        <input type="checkbox" 
                        checked="@selection_dict[option.Key]" 
                        @onchange="() => ToggleOption(item)" /> @option.Key
                    </label>
                    <br>
                }
            </div>
        }
    </button>
    @* <div class="dropdown-menu w-100" aria-labelledby="dropdownMenuButton"> *@
    

@* <style>
        .filter-container {
    position: sticky;
    top: 0;
    z-index: 1;
    background-color: white;
}

.filter-container > div {
    margin-left: 10px;
    margin-right: 10px;
    padding-top: 8px;
    padding-bottom: 8px;
}

.dropdown-menu {
    max-height: 200px;
    overflow-y: auto;
    padding-top: 0;
}

.dropdown-item {
    user-select: none;
}

.dropdown-toggle::after {
    position: absolute;
    right: 0.75rem;
    top: 50%;
    margin-top: -2px;
}

.btn.dropdown-toggle {
    --bs-btn-hover-color: var(--bs-btn-color);
    --bs-btn-hover-bg: var(--bs-btn-bg);
    --bs-btn-hover-border-color: var(--bs-btn-border-color);
    --bs-btn-active-color: var(--bs-btn-color);
    --bs-btn-active-bg: var(--bs-btn-bg);
    --bs-btn-active-border-color: var(--bs-btn-border-color);
}

.btn.dropdown-toggle.show {
    color: var(--bs-btn-color);
    background-color: var(--bs-btn-bg);
    border-color: var(--bs-btn-border-color);
}
</style> *@
@code
{
    [Parameter] public List<string> Options { get; set; } = new();
    [Parameter] public List<int> SelectedOptions { get; set; } = new();
    [Parameter] public EventCallback<List<int>> SelectedOptionsChanged { get; set; }

    
    private bool if_show_checkbox = false;

    public  Dictionary<string, bool> selection_dict = new Dictionary<string, bool>();

    protected override void OnInitialized()
    {
        selection_dict = MakeMultiSelectDict(Options);
    }

    private void SampleFunc()
    {   
        if(if_show_checkbox)
        {
            if_show_checkbox = false;
        }
        else
        {
            if_show_checkbox = true;
        }
    }

    private Dictionary<string, bool> MakeMultiSelectDict(List<string> _option_list)
    {
        Dictionary<string, bool> selection_dict = new Dictionary<string, bool>();

        foreach(string elem in _option_list)
        {
            selection_dict[elem] = true;
        }

        return selection_dict;
    }

}
