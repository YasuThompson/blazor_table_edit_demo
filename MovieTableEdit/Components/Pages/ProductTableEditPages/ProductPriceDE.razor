@page "/product-price-de"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MovieTableEdit.Models
@using MovieTableEdit.Data
@* @inject IDbContextFactory<MovieTableEdit.Data.MovieTableEditContext> DbFactory *@
@inject MovieTableEdit.Data.MovieTableEditContext DbContext
@implements IAsyncDisposable


<PageTitle>Product Price</PageTitle>

<p>
    <a href="movies/create">Create New</a>
</p>

<QuickGrid Class="table" Items="_currentData">
    <PropertyColumn Property="movie => GetDictionaryValue(movie.ProductId)" />

    <TemplateColumn Title="Price">
        <div>
            <label>
                <input type="decimal" @bind="@context.Price" />
            </label>
        </div>
    </TemplateColumn>

    <TemplateColumn Title="German Rating">
        <div>
            <select type="int" @bind="@context.RatingDE">
                @foreach(var kvp in dim_dict_rating_de)
                {
                    <option value=@kvp.Key>@kvp.Value</option>
                }
            </select>
        </div>
    </TemplateColumn>
     
</QuickGrid>

@code {
    @* private MovieTableEditContext context = default!; *@

    private Dictionary<int, string> dimensionDictionary;
    private Dictionary<int, string> dim_dict_rating_de;

    private IQueryable<MockMoviePriceDE> _currentData;

    private double latest_version;
    private double new_version;
    
    protected override async Task OnInitializedAsync()

    {
        @* context = DbFactory.CreateDbContext(); *@
        @* var prices = await DbContext.MockMovieFact.ToListAsync(); *@
        // Assuming _context is your instance of DbContext (injected through DI or created in the code)
        latest_version = DbContext.MockMoviePriceDE.Max(x => (double)x.Version);

        new_version = new_version + 0.01

        _currentData = DbContext.MockMoviePriceDE.Where(x => (double)x.Version == latest_version);

        dimensionDictionary = DbContext.MockProductDim.Select(p => new {p.ProductId, p.Title}).AsEnumerable().ToDictionary(kvp => kvp.ProductId, kvp => kvp.Title);
        dim_dict_rating_de = DbContext.MockRatingDEDim.Select(p => new {p.RatingDEId, p.RatingDE}).AsEnumerable().ToDictionary(kvp => kvp.RatingDEId, kvp => kvp.RatingDE);
    }   

    // Helper method to safely get the value from the dictionary
    private string GetDictionaryValue(int key)
    {
        if (dimensionDictionary != null && dimensionDictionary.ContainsKey(key))
        {
            return dimensionDictionary[key];
        }
        return "Key not found";
    }

    public async ValueTask DisposeAsync() => await DbContext.DisposeAsync();




    
}