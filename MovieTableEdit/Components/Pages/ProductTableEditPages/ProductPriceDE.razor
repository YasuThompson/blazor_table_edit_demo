@page "/product-price-de"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MovieTableEdit.Models
@using MovieTableEdit.Data
@* @inject IDbContextFactory<MovieTableEdit.Data.MovieTableEditContext> DbFactory *@
@inject MovieTableEdit.Data.MovieTableEditContext DbContext
@implements IAsyncDisposable


<PageTitle>Product Price</PageTitle>

<p>
    <a href="movies/create">Create New</a>
</p>

<QuickGrid Class="table" Items="_currentData">
    <PropertyColumn Property="movie => GetDictionaryValue(movie.ProductId)" />

    <TemplateColumn Title="Price">
        <div>
            <label>
                <input type="decimal" @bind="@context.Price" />
            </label>
        </div>
    </TemplateColumn>
     
</QuickGrid>

@code {
    @* private MovieTableEditContext context = default!; *@

    private Dictionary<int, string> dimensionDictionary;
    private IQueryable<MockMoviePriceDE> _currentData;
    
    protected override async Task OnInitializedAsync()

    {
        @* context = DbFactory.CreateDbContext(); *@
        @* var prices = await DbContext.MockMovieFact.ToListAsync(); *@

        _currentData = DbContext.MockMoviePriceDE;

        dimensionDictionary = DbContext.MockProductDim.Select(p => new {p.ProductId, p.Title}).AsEnumerable().ToDictionary(kvp => kvp.ProductId, kvp => kvp.Title);
    }

    // Helper method to safely get the value from the dictionary
    private string GetDictionaryValue(int key)
    {
        if (dimensionDictionary != null && dimensionDictionary.ContainsKey(key))
        {
            return dimensionDictionary[key];
        }
        return "Key not found";
    }

    public async ValueTask DisposeAsync() => await DbContext.DisposeAsync();




    
}