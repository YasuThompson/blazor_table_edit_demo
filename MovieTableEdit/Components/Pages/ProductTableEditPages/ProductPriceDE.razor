@page "/product-price/DE/{selected_product_type}"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MovieTableEdit.Models
@using MovieTableEdit.Data
@using MovieTableEdit.Shared.TableManager

@inject MovieTableEdit.Data.MovieTableEditContext DbContext
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@using System

<PageTitle>Product Price</PageTitle>

<QuickGrid Class="table" Items="queried_rows" TGridItem="MockProductPriceDE">
    <PropertyColumn Property="product => GetDictionaryValue(product.ProductId)" />

    <TemplateColumn Title="Price">
        <div>
            <label>
                <input type="int" class="@(context.Price > 0 ? "selected-row" : "")" @bind="@context.Price" />
            </label>
        </div>
    </TemplateColumn>

    <TemplateColumn Title="German Rating">
        <div>
            <select type="int" @bind="@context.RatingDE">
                @foreach(var kvp in dim_dict_rating_de)
                {
                    <option value=@kvp.Key>@kvp.Value</option>
                }
            </select>
        </div>
    </TemplateColumn>

    <TemplateColumn Context="row">
        <button @onclick="() => CopyColumn(row.Id)">Copy</button>
        <button @onclick="() => RemoveColumn(row.Id)">Remove</button>
    </TemplateColumn>

</QuickGrid>

<style>
    .selected-row {
        @* background-color: tomato; *@
        text-decoration: line-through;
    }
</style>

<h3>Product List</h3>

<table class="table">
    <thead>
        <tr>
            <th>Product Id</th>
            <th>German Rating</th>
            <th>Product Price</th>
        </tr>
    </thead>
    <tbody>
        @foreach (MockProductPriceDE _row in added_rows)
        {
            <tr>
                <td>@_row.ProductId</td>
                <td>@_row.RatingDE</td>
                <td>
                    <input type="decimal" @bind="_row.Price" class="form-control" />
                </td>
            </tr>
        }
    </tbody>
</table>


<button @onclick="PublishChanges">Publish Changes</button>

@code {
    private MovieTableEditContext db_context = default!;


    [Parameter]
    [SupplyParameterFromQuery(Name = "selected_product_type")]
    public string selected_product_type { get; set; }

    private Dictionary<string, int> product_type_id_dict = new Dictionary<string, int>
    {
        { "movie", 1 },
        { "tv", 2 },
        { "anime", 3 },
        { "comic", 4 },
    };

    private int selected_product_type_id;

    private Dictionary<int, string> dimensionDictionary;
    private Dictionary<int, string> dim_dict_rating_de;
    private IQueryable<MockProductPriceDE> queried_rows;
    private List<MockProductPriceDE> added_rows = new List<MockProductPriceDE>();
    private TableIndexManager delete_index_manager = new TableIndexManager();
    
    private double latest_version;
    private double new_version;
    private int largest_id_num;
    
    protected override async Task OnInitializedAsync()
    {   
        db_context = DbContext;
        selected_product_type_id = product_type_id_dict[selected_product_type];

        latest_version = db_context.DbSetMockProductPriceDE.Where(x => x.ProductTypeId == selected_product_type_id).Max(x => x.Version);
        largest_id_num = db_context.DbSetMockProductPriceDE.Max(x => x.Id);

        new_version = latest_version +  0.01;

        queried_rows = db_context.DbSetMockProductPriceDE.Where(x => x.Version==latest_version && x.ProductTypeId==selected_product_type_id);

        dimensionDictionary = db_context.DbSetMockProductDim.Select(p => new {p.ProductId, p.Title}).AsEnumerable().ToDictionary(kvp => kvp.ProductId, kvp => kvp.Title);
        dim_dict_rating_de = db_context.DbSetMockRatingDEDim.Select(p => new {p.RatingDEId, p.RatingDE}).AsEnumerable().ToDictionary(kvp => kvp.RatingDEId, kvp => kvp.RatingDE);
    }   

    // Helper method to safely get the value from the dictionary
    private string GetDictionaryValue(int key)
    {
        if (dimensionDictionary != null && dimensionDictionary.ContainsKey(key))
        {
            return dimensionDictionary[key];
        }
        return "Value not found from the dimension table";
    }

    public async ValueTask DisposeAsync() => await db_context.DisposeAsync();

    private async Task CopyColumn(int clicked_row_id)
    {
        MockProductPriceDE clicked_row = queried_rows.FirstOrDefault(x => x.Id == clicked_row_id);
        added_rows.Add(clicked_row);
    }

    private void RemoveColumn(int clicked_row_id)
    {
        @* MockProductPriceDE clicked_row = queried_rows.FirstOrDefault(x => x.Id == clicked_row_id); *@

        delete_index_manager.AddIndex(clicked_row_id);
        te
    }

    private async Task PublishChanges()
    {   

        int cnt = 0;

        foreach (var edited_row in queried_rows) 
        {
            edited_row.Version = new_version;
            edited_row.Id = largest_id_num + cnt + 1;
            cnt += 1;
        }

        db_context.DbSetMockProductPriceDE.AddRangeAsync(queried_rows);

        await db_context.SaveChangesAsync();

        NavigationManager.NavigateTo("/");

    }
    
}