@page "/product-price/DE/{selected_product_type}"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MovieTableEdit.Models
@using MovieTableEdit.Data
@using MovieTableEdit.Shared.TableManager

@inject MovieTableEdit.Data.MovieTableEditContext DbContext

@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@using System

<PageTitle>Product Price</PageTitle>

<div class="main-container">
    <div class="content">
        <h3>Queried rows</h3>
        <QuickGrid Class="table" Items="queried_rows" TGridItem="MockProductPriceDE">
            <TemplateColumn Title="Title">
                <div class="@SharedFunctions.IfDeleteCell(context.Id, delete_index_manager)"> @SharedFunctions.GetDimDictValue(context.ProductId, dim_dict_product_title) 
                    <span class="tooltip-text" id="top"> 
                        @SharedFunctions.GetDimDictValue(context.ProductId, dim_dict_product_explanation) 
                    </span>           
                </div>   
            </TemplateColumn>

            <TemplateColumn Title="Price">
                <label>
                    <input type="int" class="@SharedFunctions.IfDeleteCell(context.Id, delete_index_manager)" @bind="@context.Price" />
                </label>
            </TemplateColumn>

            <TemplateColumn Title="German Rating">
                <select type="int" class="@SharedFunctions.IfDeleteCell(context.Id, delete_index_manager)"  @bind="@context.RatingDEId">
                    @foreach(var kvp in dim_dict_rating_de)
                    {
                        <option value=@kvp.Key>@kvp.Value</option>
                    }
                </select>
            </TemplateColumn>

            <TemplateColumn>
                <label class="switch">
                    <input type="checkbox" @onclick="() => SharedFunctions.ToggleRowIndex(context.Id, delete_index_manager)" checked>
                    <span class="slider round"></span>
                </label>
            </TemplateColumn>
        </QuickGrid>

        <br/>
        <h3>Added rows</h3>
        <button @onclick="AddRow">Add a row</button>

        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Product Price</th>
                    <th>German Rating</th>
                    
                </tr>
            </thead>
            <tbody>
                @foreach (MockProductPriceDE _row in added_rows)
                {
                    <tr>
                        <td>
                            <select type="int"  @bind="@_row.ProductId">
                                @foreach(var kvp in dim_dict_product_title)
                                {
                                    <option value=@kvp.Key>@kvp.Value</option>
                                }
                            </select>
                        </td>
                        <td>
                            <input type="decimal" @bind="_row.Price" class="form-control" />
                        </td>
                        <td>
                            <select type="int"  @bind="@_row.RatingDEId">
                                @foreach(var kvp in dim_dict_rating_de)
                                {
                                    <option value=@kvp.Key>@kvp.Value</option>
                                }
                            </select>
                        </td>
                        <td>
                            <button @onclick="() => DelAddedRow(_row)">Remove</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button @onclick="PublishChanges">Publish Changes</button>
    </div>

    @if (if_show_panel)
    {
        <div class="edit-panel">

            <div>
                <label>Name:</label>
            </div>


            <button >Save</button>
            <button >Close</button>
        </div>
    }
    
</div>


@code {
    private MovieTableEditContext db_context = default!;

    
    // The paramter routed from the table selection page
    // TODO: it might be better to route integer indexes instead of string as the parameter
    [Parameter]
    [SupplyParameterFromQuery(Name = "selected_product_type")]
    public string selected_product_type { get; set; }

    // A dictionary mapping from the route parameter to its corresponding index
    // TODO: it might be better to route integer indexes or pass parameters in a different way
    private Dictionary<string, int> product_type_id_dict = new Dictionary<string, int>
    {
        { "movie", 1 },
        { "tv", 2 },
        { "anime", 3 },
        { "comic", 4 },
    };

    // A parameter to control the panel to add the row
    // TODO: might not need the panel anymore
    private bool if_show_panel = false;

    // The index of the selected product type in the table selection page
    private int selected_product_type_id; 

    // Dictionaries to map indexes of dimension tables
    private Dictionary<int, string> dim_dict_product_title;
    private Dictionary<int, string> dim_dict_rating_de;
    private Dictionary<int, string> dim_dict_product_explanation;
    
    // Rows queried from the database
    private IQueryable<MockProductPriceDE> queried_rows;

    // Lists used to preare the final table to be published with a new version 
    private List<MockProductPriceDE> reduced_queried_rows = new List<MockProductPriceDE>();
    private List<MockProductPriceDE> added_rows = new List<MockProductPriceDE>();
    private List<MockProductPriceDE> published_rows = new List<MockProductPriceDE>();

    // Hashset of table row indexes to manage rows to delte or edited rows
    private TableIndexManager delete_index_manager = new TableIndexManager();
    private TableIndexManager edited_index_manager = new TableIndexManager(); // Currently not used
    
    private double latest_version;
    private double new_version;
    private int largest_id_num;
    
    protected override async Task OnInitializedAsync()
    {   
        db_context = DbContext;

        // Mapping the selected product type to its index
        selected_product_type_id = product_type_id_dict[selected_product_type];

        // Get the latest price version of the selected product type
        latest_version = db_context.DbSetMockProductPriceDE
            .Where(x => x.ProductTypeId == selected_product_type_id) // Querying only the selected product type
            .Max(x => x.Version);

        // Get the biggest index   
        largest_id_num = db_context.DbSetMockProductPriceDE.Max(x => x.Id);

        new_version = latest_version +  0.01;

        // Queries records of the selected product, with the latest persion 
        queried_rows = db_context.DbSetMockProductPriceDE
            .Where(x => x.Version==latest_version && x.ProductTypeId==selected_product_type_id);

        // Make dictionaries mapping from an id to its values from dimension tables
        dim_dict_product_title = db_context.DbSetMockProductDim
            .Where(p => p.ProductTypeId == selected_product_type_id) // Querying only the selected product type
            .Select(p => new {p.ProductId, p.Title})
            .AsEnumerable()
            .ToDictionary(kvp => kvp.ProductId, kvp => kvp.Title);

        dim_dict_rating_de = db_context.DbSetMockRatingDEDim
            .Select(p => new {p.RatingDEId, p.RatingDE})
            .AsEnumerable()
            .ToDictionary(kvp => kvp.RatingDEId, kvp => kvp.RatingDE);
        
        dim_dict_product_explanation = db_context.DbSetMockProductDim
            .Where(p => p.ProductTypeId == selected_product_type_id) // Querying only the selected product type
            .Select(p => new {p.ProductId, p.Note})
            .AsEnumerable()
            .ToDictionary(kvp => kvp.ProductId, kvp => kvp.Note);
    }   
    
    // TODO: should this come here? 
    public async ValueTask DisposeAsync() => await db_context.DisposeAsync();

    // Add an empty row to the list of added rows
    private async Task AddRow()
    {
        added_rows.Add(new MockProductPriceDE());
    }

    // Delete the clicked row from the added rows
    private async Task DelAddedRow(MockProductPriceDE _del_elem)
    {
        added_rows.Remove(_del_elem);
    }

    // Upload the edited table
    // TODO: this part might not be memory efficient
    private async Task PublishChanges()
    {   
        int cnt = 0;

        @* published_rows = queried_rows.ToList().Concat(added_rows).ToList(); *@

        // Remove rows to delete
        foreach(var _row in queried_rows)
        {
            if(delete_index_manager.ContainsIndex(_row.Id))
            {
                ;
            }
            else 
            {
                reduced_queried_rows.Add(_row);
            }
        }
        
        // Combining the reduced rows and added rows
        published_rows = reduced_queried_rows.Concat(added_rows).ToList();

        // Give new indexes without duplicates with the older records
        foreach (var _row in published_rows) 
        {   
            // Set a proper product type id
            _row.ProductTypeId = selected_product_type_id;
            // Set the new version
            _row.Version = new_version;
            // Set unique and sequential indexes
            _row.Id = largest_id_num + cnt + 1;
            cnt += 1;
        }

        // Adding the edited rows
        db_context.DbSetMockProductPriceDE.AddRangeAsync(published_rows);

        // Uploading the rows with a new version to the database
        await db_context.SaveChangesAsync();

        // Going back to the table selection page
        NavigationManager.NavigateTo("/");

    }
    
}