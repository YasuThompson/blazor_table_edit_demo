@page "/category-dim/{selected_cat_dim}"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MovieTableEdit.Models
@using MovieTableEdit.Data
@inject IDbContextFactory<MovieTableEdit.Data.MovieTableEditContext> DbFactory
@implements IAsyncDisposable
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Dimension Table</PageTitle>


@if(selected_cat_dim=="product-type")
{
    <QuickGrid Class="table" Items="product_type_data">
        <PropertyColumn Property="genre => genre.ProductTypeId" />
        <TemplateColumn Title="Genre">
            <div>
                <label>
                    <input type="string" @bind="@context.ProductType" />
                </label>
            </div>
        </TemplateColumn>
    </QuickGrid>
}

@if(selected_cat_dim=="product-genre")
{
    <QuickGrid Class="table" Items="genre_data">
        <PropertyColumn Property="genre => genre.GenreId" />
        <TemplateColumn Title="Genre">
            <div>
                <label>
                    <input type="string" @bind="@context.Genre" />
                </label>
            </div>
        </TemplateColumn>
    </QuickGrid>
}

@if(selected_cat_dim=="rating-de")
{
    <QuickGrid Class="table" Items="rating_de_data">
        <PropertyColumn Property="genre => genre.RatingDEId" />
        <TemplateColumn Title="German Rating">
            <div>
                <label>
                    <input type="string" @bind="@context.RatingDE" />
                </label>
            </div>
        </TemplateColumn>
    </QuickGrid>
}

@if(selected_cat_dim=="rating-fr")
{
    <QuickGrid Class="table" Items="rating_fr_data">
        <PropertyColumn Property="genre => genre.RatingFRId" />
        <TemplateColumn Title="Genre">
            <div>
                <label>
                    <input type="string" @bind="@context.RatingFR" />
                </label>
            </div>
        </TemplateColumn>
    </QuickGrid>
}

<button @onclick="SaveChanges">Save Changes</button>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "selected_cat_dim")]
    public required string selected_cat_dim { get; set; }

    // TODO: what does this line do?
    private MovieTableEditContext db_context = default!;
    
    private IQueryable<TempProductTypeDim>? product_type_data;
    private IQueryable<TempGenreDim>? genre_data;
    private IQueryable<TempRatingDEDim>? rating_de_data;
    private IQueryable<TempRatingFRDim>? rating_fr_data;

    protected override async Task OnInitializedAsync()
    {   
        // Make a database context
        db_context = DbFactory.CreateDbContext();

        if (selected_cat_dim == "product-type")
        {   
            bool if_temp_exists = db_context.DbSetTempProductTypeDim.Count() > 0;

            // When the the temporary table is empty
            if(!if_temp_exists)
            {   
                var result = await ProtectedSessionStore.GetAsync<double>("product-type-dim-ver");
                double product_type_dim_ver_config = (double)result.Value;
                
                // Get rows with the latest version and cast them to a temporary table
                var latest_rows = db_context.DbSetProductTypeDim
                    .Where(x => x.Version==product_type_dim_ver_config)
                    .Select(x => new TempProductTypeDim 
                        {
                            ProductTypeId = x.ProductTypeId, 
                            ProductType = x.ProductType,
                            Version = x.Version, 
                            IfActive = true, 
                            IfEdited = false
                        }
                    );

                await db_context.DbSetTempProductTypeDim.AddRangeAsync(latest_rows);

                // Uploading the rows with a new version to the database
                await db_context.SaveChangesAsync();
            }
            
            product_type_data = db_context.DbSetTempProductTypeDim;

        }
        else if (selected_cat_dim == "product-genre")
        {
            bool if_temp_exists = db_context.DbSetTempGenreDim.Count() > 0;

            // When the the temporary table is empty
            if(!if_temp_exists)
            {   
                var result = await ProtectedSessionStore.GetAsync<double>("genre-dim-ver");
                double genre_dim_ver_config = (double)result.Value;
                
                // Get rows with the latest version and cast them to a temporary table
                var latest_rows = db_context.DbSetGenreDim
                    .Where(x => x.Version==genre_dim_ver_config)
                    .Select(x => new TempGenreDim 
                        {
                            GenreId = x.GenreId, 
                            Genre = x.Genre,
                            Version = x.Version, 
                            IfActive = true, 
                            IfEdited = false
                        }
                    );

                await db_context.DbSetTempGenreDim.AddRangeAsync(latest_rows);

                // Uploading the rows with a new version to the database
                await db_context.SaveChangesAsync();
            }
            
            genre_data = db_context.DbSetTempGenreDim;

        }
        else if (selected_cat_dim == "rating-de")
        {   
            bool if_temp_exists = db_context.DbSetTempRatingDEDim.Count() > 0;

            // When the the temporary table is empty
            if(!if_temp_exists)
            {   
                var result = await ProtectedSessionStore.GetAsync<double>("rating-de-dim-ver");
                double rating_de_dim_ver_config = (double)result.Value;
                
                // Get rows with the latest version and cast them to a temporary table
                var latest_rows = db_context.DbSetRatingDEDim
                    .Where(x => x.Version==rating_de_dim_ver_config)
                    .Select(x => new TempRatingDEDim 
                        {
                            RatingDEId = x.RatingDEId, 
                            RatingDE = x.RatingDE,
                            Version = x.Version, 
                            IfActive = true, 
                            IfEdited = false
                        }
                    );

                await db_context.DbSetTempRatingDEDim.AddRangeAsync(latest_rows);

                // Uploading the rows with a new version to the database
                await db_context.SaveChangesAsync();
            }

            rating_de_data = db_context.DbSetTempRatingDEDim;
        }
        else if (selected_cat_dim == "rating-fr")
        {   
            bool if_temp_exists = db_context.DbSetTempRatingFRDim.Count() > 0;

            // When the the temporary table is empty
            if(!if_temp_exists)
            {   
                var result = await ProtectedSessionStore.GetAsync<double>("rating-fr-dim-ver");
                double rating_fr_dim_ver_config = (double)result.Value;
                
                // Get rows with the latest version and cast them to a temporary table
                var latest_rows = db_context.DbSetRatingFRDim
                    .Where(x => x.Version==rating_fr_dim_ver_config)
                    .Select(x => new TempRatingFRDim 
                        {
                            RatingFRId = x.RatingFRId, 
                            RatingFR = x.RatingFR,
                            Version = x.Version, 
                            IfActive = true, 
                            IfEdited = false
                        }
                    );

                await db_context.DbSetTempRatingFRDim.AddRangeAsync(latest_rows);

                // Uploading the rows with a new version to the database
                await db_context.SaveChangesAsync();
            }

            rating_fr_data = db_context.DbSetTempRatingFRDim;
        }
    }

    // TODO: what does this line do?
    public async ValueTask DisposeAsync() => await db_context.DisposeAsync();

    // A function for debug

    private async Task SaveChanges()
    {
        await db_context.SaveChangesAsync();

        // Going back to the table selection page
        NavigationManager.NavigateTo("/");
    }

}