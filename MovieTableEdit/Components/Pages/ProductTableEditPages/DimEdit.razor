@page "/category-dim/{selected_cat_dim}"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MovieTableEdit.Models
@using MovieTableEdit.Data
@inject MovieTableEdit.Data.MovieTableEditContext DbContext

@* @inject IDbContextFactory<MovieTableEdit.Data.MovieTableEditContext> DbFactory *@
@implements IAsyncDisposable

@inject NavigationManager NavigationManager


<PageTitle>Dimension Table</PageTitle>

<QuickGrid Class="table" Items="_currentData">
    <PropertyColumn Property="genre => genre.GenreId" />
    <TemplateColumn Title="Genre">
        <div>
            <label>
                <input type="string" @bind="@context.Genre" />
            </label>
        </div>

    </TemplateColumn>
</QuickGrid>

<button @onclick="SaveChanges">Save Changes</button>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "selected_cat_dim")]
    public string selected_cat_dim { get; set; }

    // TODO: what does this line do?
    private MovieTableEditContext context = default!;


    string selected_dim_table = "genre";
    
    private IQueryable<MockGenreDim> _currentData;

    protected override async Task OnInitializedAsync()
    {   

        //TODO: what is the best way to get a dbcontext?

        @* context = DbFactory.CreateDbContext(); *@
        context = DbContext;
        @* _currentData = await context.MockGenreDim.ToListAsync(); *@
        _currentData = DbContext.MockGenreDim;
    }


    // TODO: what does this line do?
    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    // A function for debug
    private async Task PrintClassList()
    {
        foreach (var item in _currentData)
        {
            Console.WriteLine(item.Genre);
        }
        Console.WriteLine();
    }

    private async Task SaveChanges()
    {
        context.SaveChangesAsync();
    }

}