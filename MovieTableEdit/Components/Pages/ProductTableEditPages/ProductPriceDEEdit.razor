@page "/product-price/DE/{selected_product_type}"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MovieTableEdit.Models
@using MovieTableEdit.Data
@using MovieTableEdit.Shared.TableManager
@using static MovieTableEdit.Shared.TableManager.SharedFunctions

@inject IDbContextFactory<MovieTableEdit.Data.MovieTableEditContext> DbFactory

@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@using System

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Product Price</PageTitle>
        <h3>Queried rows</h3>

        <!-- The queried price table based on parameters from the table selection page.  -->
        <QuickGrid Class="table" Items="filetered_rows" TGridItem="TempProductPriceDE">
            <!-- Column of ProductIds -->
            <TemplateColumn Title="Title">
                <!-- Contents of each cell -->
                <ChildContent>
                    <!-- Control strikethrough with this class -->
                    <div class="@IfDeleteCell(context.Id, delete_index_manager)"> 
                        <!-- Maps each ProductId to its product title -->
                        @GetDimDictValue(context.ProductId, dim_dict_id_product_title) 
                        <!-- Hover text on each product tile -->
                        <span class="tooltip-text" id="top"> 
                            <!-- Get product note from each ProductId -->
                            @GetDimDictValue(context.ProductId, dim_dict_product_id_note) 
                        </span>           
                    </div>  
                </ChildContent>
                <!-- Search funciton of the column -->
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Country name..." />
                    </div> 
                </ColumnOptions>
            </TemplateColumn>

            <TemplateColumn Title="Genre">
                <ChildContent>
                    <div class="@IfDeleteCell(context.Id, delete_index_manager)"> 
                        <!-- TODO: instead of using GetDimDictValueNested(), 
                        should I join the join the dimension table in advance? -->
                        @GetDimDictValueNested(context.ProductId, dim_dict_product_id_genre_id, dim_dict_id_genre)  
                    </div>   
                </ChildContent>
                <ColumnOptions>
                    <select type="int"  @bind="genre_filter">
                        @foreach(var kvp in dim_dict_id_genre)
                        {
                            <option value=@kvp.Key>@kvp.Value</option>
                        }
                    </select>
                </ColumnOptions>
            </TemplateColumn>

            <TemplateColumn Title="Price">
                <ChildContent>
                    <label>
                        <input type="int" class="@IfDeleteCell(context.Id, delete_index_manager)" @bind="@context.Price" />
                    </label>
                </ChildContent>
                <ColumnOptions>
                    <p>Min: <input type="range" @bind="minMedals" @bind:event="oninput" min="0" max="150" /> <span class="inline-block w-10">@minMedals</span></p>
                    <p>Max: <input type="range" @bind="maxMedals" @bind:event="oninput" min="0" max="120" /> <span class="inline-block w-10">@maxMedals</span></p>
                </ColumnOptions>
            </TemplateColumn>

            <TemplateColumn Title="German Rating">
                <ChildContent>
                    <select type="int" class="@IfDeleteCell(context.Id, delete_index_manager)"  @bind="@context.RatingDEId">
                        @foreach(var kvp in dim_dict_id_rating_de)
                        {
                            <option value=@kvp.Key>@kvp.Value</option>
                        }
                    </select>
                </ChildContent>
                <ColumnOptions>
                    <select type="int"  @bind="rating_de_filter">
                        @foreach(var kvp in dim_dict_id_rating_de)
                        {
                            <option value=@kvp.Key>@kvp.Value</option>
                        }
                    </select>
                </ColumnOptions>
            </TemplateColumn>

            <TemplateColumn>
                <label class="switch">
                    <input type="checkbox" @onclick="() => ToggleRowIndex(context.Id, delete_index_manager)" checked>
                    <span class="slider round"></span>
                </label>
            </TemplateColumn>
        </QuickGrid>

        <br/>
        <h3>Added rows</h3>
        <button @onclick="AddRow">Add a row</button>

        <table class="table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Genre</th>
                    <th>Product Price</th>
                    <th>German Rating</th>
                </tr>
            </thead>
            <tbody>
                @foreach (TempProductPriceDE _row in added_rows)
                {
                    <tr>
                        <td>
                            <select type="int"  @bind="@_row.ProductId">
                                @foreach(var kvp in dim_dict_id_product_title)
                                {
                                    <option value=@kvp.Key>@kvp.Value</option>
                                }
                            </select>
                        </td>
                        <td>
                            @GetDimDictValueNested(_row.ProductId, dim_dict_product_id_genre_id, dim_dict_id_genre)
                        </td>
                        <td>
                            <input type="decimal" @bind="_row.Price" class="form-control" />
                        </td>
                        <td>
                            <select type="int"  @bind="@_row.RatingDEId">
                                @foreach(var kvp in dim_dict_id_rating_de)
                                {
                                    <option value=@kvp.Key>@kvp.Value</option>
                                }
                            </select>
                        </td>
                        <td>
                            <button @onclick="() => DelAddedRow(_row)">Remove</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br/>
        <button @onclick="ApplyChanges">Publish Changes</button>

@code {
    private MovieTableEditContext db_context = default!;

    // The paramter routed from the table selection page
    // TODO: it might be better to route integer indexes instead of string as the parameter
    [Parameter]
    [SupplyParameterFromQuery(Name = "selected_product_type")]
    public required string selected_product_type { get; set; }

    // A dictionary mapping from the route parameter to its corresponding index
    // TODO: it might be better to route integer indexes or pass parameters in a different way
    private Dictionary<string, int> product_type_id_dict = new Dictionary<string, int>
    {
        { "movie", 1 },
        { "tv", 2 },
        { "anime", 3 },
        { "comic", 4 },
    };

    // The index of the selected product type in the table selection page
    private int selected_product_type_id; 

    private double product_type_dim_ver;

    // Dictionaries to map indexes of dimension tables
    private Dictionary<int, string> dim_dict_id_product_type = new Dictionary<int, string>(); // product type id to product type
    private Dictionary<int, string> dim_dict_id_product_title = new Dictionary<int, string>(); // product id to product tile
    private Dictionary<int, int> dim_dict_product_id_genre_id = new Dictionary<int, int>(); // product id to its genre
    private Dictionary<int, string> dim_dict_id_rating_de = new Dictionary<int, string>(); // RatingDEId to RatingDE
    private Dictionary<int, string> dim_dict_product_id_note = new Dictionary<int, string>(); // ProductId to its Note
    private Dictionary<int, string> dim_dict_id_genre = new Dictionary<int, string>(); // GenreId to Genre
    
    // Rows queried from the database
    private IQueryable<TempProductPriceDE> queried_rows;

    // Lists used to preare the final table to be published with a new version 
    private List<TempProductPriceDE> reduced_queried_rows = new List<TempProductPriceDE>();
    private List<TempProductPriceDE> added_rows = new List<TempProductPriceDE>();
    private List<TempProductPriceDE> published_rows = new List<TempProductPriceDE>();

    // Hashset of table row indexes to manage rows to delete or edited rows
    private TableIndexManager delete_index_manager = new TableIndexManager();
    @* private TableIndexManager edited_index_manager = new TableIndexManager(); // Currently not used *@
    
    private double latest_version;

    private string nameFilter = "";
    private int? rating_de_filter;
    private int? genre_filter;
    int minMedals;
    int maxMedals = 120;

    IQueryable<TempProductPriceDE> filetered_rows
    {
        get
        {
            IQueryable<TempProductPriceDE> result = queried_rows;
            

            if (!string.IsNullOrEmpty(nameFilter))
            {   
                // Filter out keys whose values contain "nameFilter" and extract as an id list
                // TODO: is the following a redundant approach?
                List<int> filtered_product_id_list = dim_dict_id_product_title
                    .Where(kv => kv.Value.ToLower().Contains(nameFilter.ToLower()) )
                    .Select(kv => kv.Key)
                    .ToList();
                
                result = result.Where(r => filtered_product_id_list.Contains(r.ProductId));
            }


            if (rating_de_filter.HasValue)
            {
                result = result.Where(c => c.RatingDEId==rating_de_filter);
            }

            if (genre_filter.HasValue)
            {
                ;
            }

            if (minMedals > 0)
            {
                result = result.Where(c => c.Price >= minMedals);
            }

            return result;
        }  
    }
    
    protected override async Task OnInitializedAsync()
    {   
        db_context = DbFactory.CreateDbContext();

        selected_product_type_id = product_type_id_dict[selected_product_type];

        var result = await ProtectedSessionStore.GetAsync<double>("product-type-dim-ver");
        @* table_edit_type_config = result.Success ? result.Value : "unknown"; *@
        product_type_dim_ver = (double)result.Value;

        dim_dict_id_product_type = db_context.DbSetProductTypeDim
            .Where(p => p.Version==product_type_dim_ver)
            .Select(p => new {p.ProductTypeId, p.ProductType})
            .AsEnumerable()
            .ToDictionary(kvp => kvp.ProductTypeId, kvp => kvp.ProductType);

        bool if_temp_exists = db_context.DbSetTempProductPriceDE.Count() > 0;

        if(!if_temp_exists)
        {
            foreach(var kvp in dim_dict_id_product_type)
            {
                double latest_version = db_context.DbSetProductPriceDE
                    .Where(p => p.ProductTypeId == kvp.Key)
                    .Max(p => p.Version);

                IQueryable<TempProductPriceDE> temp_queried_rows = db_context.DbSetProductPriceDE
                    .Where(x => x.ProductTypeId==kvp.Key && x.Version==latest_version)
                    .Select(x => new TempProductPriceDE
                        {
                            Id = x.Id, 
                            Price = x.Price, 
                            ProductTypeId = x.ProductTypeId, 
                            ProductId = x.ProductId, 
                            RatingDEId = x.RatingDEId,
                            Version = x.Version, 
                            IfActive = true, 
                            IfEdited = false
                        }
                    );

                await db_context.DbSetTempProductPriceDE.AddRangeAsync(temp_queried_rows);
            }

            await db_context.SaveChangesAsync();

        }

        @* queried_rows = db_context.DbSetTempProductPriceDE; *@
        
        // Queries records of the selected product, with the latest persion 
        queried_rows = db_context.DbSetTempProductPriceDE
            .Where(x => x.ProductTypeId==selected_product_type_id);


        result = await ProtectedSessionStore.GetAsync<double>("product-dim-ver");
        double product_dim_ver_config = (double)result.Value;

        // Make dictionaries mapping from an id to its values from dimension tables
        dim_dict_id_product_title = db_context.DbSetProductDim
            .Where(p => p.Version == product_dim_ver_config && p.ProductTypeId == selected_product_type_id) // Querying only the selected product type
            .Select(p => new {p.ProductId, p.Title})
            .AsEnumerable()
            .ToDictionary(kvp => kvp.ProductId, kvp => kvp.Title);

        dim_dict_product_id_note = db_context.DbSetTempProductDim
            .Where(p => p.Version == product_dim_ver_config && p.ProductTypeId == selected_product_type_id) // Querying only the selected product type
            .Select(p => new {p.ProductId, p.Note})
            .AsEnumerable()
            .ToDictionary(kvp => kvp.ProductId, kvp => kvp.Note);

        dim_dict_product_id_genre_id = db_context.DbSetTempProductDim
            .Where(p => p.Version == product_dim_ver_config && p.ProductTypeId == selected_product_type_id) // Querying only the selected product type
            .Select(p => new {p.ProductId, p.GenreId})
            .AsEnumerable()
            .ToDictionary(kvp => kvp.ProductId, kvp => kvp.GenreId);

        
         
        result = await ProtectedSessionStore.GetAsync<double>("rating-de-dim-ver");
        double rating_de_dim_ver_config = (double)result.Value;
        
        dim_dict_id_rating_de = db_context.DbSetRatingDEDim
            .Where(p => p.Version == rating_de_dim_ver_config)
            .Select(p => new {p.RatingDEId, p.RatingDE})
            .AsEnumerable()
            .ToDictionary(kvp => kvp.RatingDEId, kvp => kvp.RatingDE);



        result = await ProtectedSessionStore.GetAsync<double>("genre-dim-ver");
        double genre_dim_ver_config = (double)result.Value;

        dim_dict_id_genre = db_context.DbSetGenreDim
            .Where(p => p.Version == genre_dim_ver_config)
            .Select(p => new {p.GenreId, p.Genre})
            .AsEnumerable()
            .ToDictionary(kvp => kvp.GenreId, kvp => kvp.Genre);
        
    }   
    
    // TODO: should this come here? 
    public async ValueTask DisposeAsync() => await db_context.DisposeAsync();

    // Add an empty row to the list of added rows
    private void AddRow()
    {
        added_rows.Add(new TempProductPriceDE());
    }

    // Delete the clicked row from the added rows
    private void DelAddedRow(TempProductPriceDE _del_elem)
    {
        added_rows.Remove(_del_elem);
    }

   private async Task ApplyChanges()
    {
        // Uploading the rows with a new version to the database
        await db_context.SaveChangesAsync();

        // Going back to the table selection page
        NavigationManager.NavigateTo("/");
    }
    
}