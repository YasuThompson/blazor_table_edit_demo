@page "/product-dim/{selected_product_types}"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MovieTableEdit.Models
@using MovieTableEdit.Data
@using MovieTableEdit.Shared.FilterManager
@using static MovieTableEdit.Shared.FilterManager.SharedFunctions

@inject IDbContextFactory<MovieTableEdit.Data.MovieTableEditContext> DbFactory
@implements IAsyncDisposable
@inject NavigationManager NavigationManager

@using CustomComponents.MultiCheckbox


<PageTitle>Product Information</PageTitle>

<div  style="display: flex; align-items: center;">

    <MultiCheckbox
        Options="column_option_list"
        @bind-SelectedIdList="selected_column_id_list"
        IfVerticalArrangement="false"
        />
</div>



<QuickGrid Class="table" Items="filtered_rows">
    <PropertyColumn Title="Movie ID" Property = "movie => movie.ProductId" />

    <TemplateColumn Title="Title">
        <ChildContent>
            <div>
                <label>
                    <input type="string" @bind="@context.Title" />
                </label>
            </div>
        </ChildContent>
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Title name..." />
            </div> 
        </ColumnOptions>
    </TemplateColumn>

    <TemplateColumn Title="Poster">
            <div class="flex items-center" style="max-width: 200px; width: 100%;">
                <img class="w-8 h-6 mr-4" src="@GetPosterImgPath(context.ProductId)" style="width: 100%; height: auto;" />
            </div>
    </TemplateColumn>


    <TemplateColumn Title="Product Type">
        <ChildContent>
            <div>
                <select type="int" @bind="@context.ProductTypeId">
                    @foreach(var kvp in product_type_dict)
                    {
                        <option value=@kvp.Key>@kvp.Value</option>
                    }
                </select>
            </div>
        </ChildContent>
        <ColumnOptions>
            <MultiCheckbox
                Options="product_type_option_list"
                @bind-SelectedIdList="selected_product_type_id_list"
                IdOptionDict="product_type_dict"
                />
        </ColumnOptions>
    </TemplateColumn>

    <TemplateColumn Title="Genre">
        <ChildContent>
        <div>
                <select type="int" @bind="@context.GenreId">
                    @foreach(var kvp in genre_dict)
                    {
                        <option value=@kvp.Key>@kvp.Value</option>
                    }
                </select>
            </div>
        </ChildContent>
        <ColumnOptions>
            <MultiCheckbox
                Options="genre_option_list"
                @bind-SelectedIdList="selected_genre_id_list"
                IdOptionDict="genre_dict"
                />
        </ColumnOptions>
    </TemplateColumn>

    @if(selected_column_id_list.Contains(column_option_list.IndexOf("German Title")))
    {
        <TemplateColumn Title="German Title">
            <div>
                <label>
                    <input type="string" @bind="@context.TitleDE" />
                </label>
            </div>
        </TemplateColumn>
    }

    @if(selected_column_id_list.Contains(column_option_list.IndexOf("French Title")))
    {
        <TemplateColumn Title="French Title">
            <div>
                <label>
                    <input type="string" @bind="@context.TitleFR" />
                </label>
            </div>
        </TemplateColumn>
    }

    @if(selected_column_id_list.Contains(column_option_list.IndexOf("Spanish Title")))
    {
        <TemplateColumn Title="Spanish Title">
            <div>
                <label>
                    <input type="string" @bind="@context.TitleES" />
                </label>
            </div>
        </TemplateColumn>
    }

    @if(selected_column_id_list.Contains(column_option_list.IndexOf("Italian Title")))
    {
        <TemplateColumn Title="Italian Title">
            <div>
                <label>
                    <input type="string" @bind="@context.TitleIT" />
                </label>
            </div>
        </TemplateColumn>
    }

    @if(selected_column_id_list.Contains(column_option_list.IndexOf("Japanese Title")))
    {    
        <TemplateColumn Title="Japanese Title">
            <div>
                <label>
                    <input type="string" @bind="@context.TitleJP" />
                </label>
            </div>
        </TemplateColumn>
    }


</QuickGrid>

<button @onclick="PublishChanges">Publish Changes</button>

@code {

    [Parameter]
    [SupplyParameterFromQuery(Name = "selected_product_types")]
    public required string selected_product_types { get; set; }

    // Database context
    private MovieTableEditContext db_context = default!;

    // Temporary product dimension table
    private IQueryable<TempProductDim>? queried_rows;

    // Used for title search box
    private string nameFilter = "";
    private Dictionary<int, string> product_title_dict = new Dictionary<int, string>();

    // Members needed for column checkboxes 
    private static List<string> column_option_list = new () { "German Title", "French Title", "Spanish Title", "Italian Title", "Japanese Title"};
    private List<int> selected_column_id_list = new();

    
    // Members needed for product type checkboxes
    private Dictionary<int, string> product_type_dict = new Dictionary<int, string>();
    private List<string> product_type_option_list = new();
    private List<int> selected_product_type_id_list = new List<int>(); 


    private Dictionary<int, string> genre_dict = new Dictionary<int, string>();
    private List<string> genre_option_list = new();
    private List<int> selected_genre_id_list = new List<int>(); 

    private IQueryable<TempProductDim> filtered_rows
    {   
        get
        {
            IQueryable<TempProductDim> result = queried_rows;

            result = result.Where(p => selected_product_type_id_list.Contains(p.ProductTypeId));

            result = result.Where(p => selected_genre_id_list.Contains(p.GenreId));

            if (!string.IsNullOrEmpty(nameFilter))
            {   
                // TODO: is the following a redundant approach?
                List<int> filtered_product_id_list = product_title_dict
                    .Where(kv => kv.Value.ToLower().Contains(nameFilter.ToLower()) )
                    .Select(kv => kv.Key)
                    .ToList();
                
                result = result.Where(r => filtered_product_id_list.Contains(r.ProductId));
            }

            return result;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        db_context = DbFactory.CreateDbContext();

        bool if_temp_exists = db_context.DbSetTempProductDim.Count() > 0;

        if(!if_temp_exists)
        {
            // Get the latest version of the category dimension table
            var latest_ver = db_context.DbSetProductDim.Max(x => x.Version);

            // Get rows with the latest version and cast them to a temporary table
            var latest_rows = db_context.DbSetProductDim
                .Where(x => x.Version==latest_ver)
                .Select(x => new TempProductDim 
                    {
                        ProductId = x.ProductId, 
                        Title = x.Title, 
                        ProductTypeId = x.ProductTypeId, 
                        GenreId = x.GenreId, 
                        Note = x.Note,
                        TitleDE = x.TitleDE, 
                        TitleFR = x.TitleFR,
                        TitleES = x.TitleES,
                        TitleIT = x.TitleIT,
                        TitleJP = x.TitleJP
                    }
                );

            await db_context.DbSetTempProductDim.AddRangeAsync(latest_rows);

            // Uploading the rows with a new version to the database
            await db_context.SaveChangesAsync();
        }

        queried_rows = db_context.DbSetTempProductDim;

        product_type_dict = db_context.DbSetTempProductTypeDim.Select(p => new {p.ProductTypeId, p.ProductType}).AsEnumerable().ToDictionary(kvp => kvp.ProductTypeId, kvp => kvp.ProductType);
        selected_product_type_id_list = product_type_dict.Keys.ToList();
        product_type_option_list = product_type_dict.Values.ToList();
        
        genre_dict = db_context.DbSetTempGenreDim.Select(p => new {p.GenreId, p.Genre}).AsEnumerable().ToDictionary(kvp => kvp.GenreId, kvp => kvp.Genre);
        selected_genre_id_list = genre_dict.Keys.ToList();
        genre_option_list = genre_dict.Values.ToList();

        product_title_dict = db_context.DbSetTempProductDim.Select(p => new {p.ProductId, p.Title}).AsEnumerable().ToDictionary(kvp => kvp.ProductId, kvp => kvp.Title);

    }

    private string GetPosterImgPath(int movie_id)
    {   
        string img_path = $"images/{movie_id}.jpg";
        return img_path;
    }


    private async Task PublishChanges()
    {
        // Uploading the rows with a new version to the database
        await db_context.SaveChangesAsync();

        // Going back to the table selection page
        NavigationManager.NavigateTo("/");;
    }

    public async ValueTask DisposeAsync() => await db_context.DisposeAsync();
}