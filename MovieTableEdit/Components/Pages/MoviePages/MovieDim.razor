@page "/movie-dim"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using MovieTableEdit.Models
@using MovieTableEdit.Data
@inject IDbContextFactory<MovieTableEdit.Data.MovieTableEditContext> DbFactory
@implements IAsyncDisposable


<PageTitle>Movie Price</PageTitle>

<p>
    <a href="movies/create">Create New</a>
</p>

<p>
    Display:
    @foreach (var option in displayOptions)
    {
        <label style="margin-right: 10px;">
            <input type="checkbox" @bind="displayOptions[option.Key]" /> @option.Key
        </label>
    }
</p>

<QuickGrid Class="table" Items="@context.MockMovieDim">
    <PropertyColumn Title="Movie ID" Property = "movie => movie.MovieId" />
    <PropertyColumn Title="Genre" Property = "movie => movie.GenreId" />
    <TemplateColumn Title="Genre">
        <div>
            <select type="int" @bind="@context.GenreId">
                @foreach(var kvp in dimensionDictionary)
                {
                    <option value=@kvp.Key>@kvp.Value</option>
                }
            </select>
        </div>
    </TemplateColumn>



    @* @foreach(var kvp in displayOptions)
    {
        @if(kvp.Value)
        {
            <TemplateColumn Title=@kvp.Key>
                <div>
                    <label>
                        <input type="string" @bind="@GetPropertyValue(kvp.Key)" />
                    </label>
                </div>
            </TemplateColumn>
        }
    } *@

    
    
    <TemplateColumn Title="Title">
        <div>
            <label>
                <input type="string" @bind="@context.Title" />
            </label>
        </div>
    </TemplateColumn>


    @if(displayOptions["TitleDE"])
    {
        <TemplateColumn Title="German Title">
            <div>
                <label>
                    <input type="string" @bind="@context.TitleDE" />
                </label>
            </div>
        </TemplateColumn>
    }

    @if(displayOptions["TitleFR"])
    {
        <TemplateColumn Title="French Title">
            <div>
                <label>
                    <input type="string" @bind="@context.TitleFR" />
                </label>
            </div>
        </TemplateColumn>
    }

    @if(displayOptions["TitleES"])
    {
        <TemplateColumn Title="Spanish Title">
            <div>
                <label>
                    <input type="string" @bind="@context.TitleES" />
                </label>
            </div>
        </TemplateColumn>
    }

    @if(displayOptions["TitleIT"])
    {
        <TemplateColumn Title="Italian Title">
            <div>
                <label>
                    <input type="string" @bind="@context.TitleIT" />
                </label>
            </div>
        </TemplateColumn>
    }

    @if(displayOptions["TitleJP"])
    {    
        <TemplateColumn Title="Japanese Title">
            <div>
                <label>
                    <input type="string" @bind="@context.TitleJP" />
                </label>
            </div>
        </TemplateColumn>
    }


</QuickGrid>


@code {
    private MovieTableEditContext context = default!;

    private Dictionary<int, string> dimensionDictionary;

    Dictionary<string, bool> displayOptions = new Dictionary<string, bool>
    {
        { "TitleDE", true },
        { "TitleFR", true },
        { "TitleES", false },
        { "TitleIT", false },
        { "TitleJP", false },
    };

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        dimensionDictionary = context.MockGenreDim.Select(p => new {p.GenreId, p.Genre}).AsEnumerable().ToDictionary(kvp => kvp.GenreId, kvp => kvp.Genre);
    }

    // Helper method to safely get the value from the dictionary
    private string GetGenre(int key)
    {
        if (dimensionDictionary != null && dimensionDictionary.ContainsKey(key))
        {
            return dimensionDictionary[key];
        }
        return "Key not found";
    }



    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}